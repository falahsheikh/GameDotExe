package com.thelocalmarketplace.software;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.math.BigDecimal;

import org.junit.Test;

import com.jjjwelectronics.Item;
import com.jjjwelectronics.Mass;
import com.thelocalmarketplace.hardware.SelfCheckoutStation;
import com.thelocalmarketplace.software.Software;

public class WeightTest {

    @Test
    public void testWeightDiscrepancy() {
        // Creating an instance of SelfCheckoutStation and Software
        SelfCheckoutStation scs = new SelfCheckoutStation();
        Software software = new Software(scs);

        assertFalse(software.allow); // Initial state

        // Set different expected and current weights to trigger weight discrepancy
        software.expectedWeight = new Mass(1000); // 1000 grams
        software.currentWeight = new Mass(1500); // 1500 grams

        software.weightDiscrepancy();

        assertFalse(software.allow); // Check that allow is still false after weight discrepancy
    }

    @Test
    public void testCustomerBlockMessage() {
        // Redirect System.out to capture printed message
        SystemOutCapture capture = new SystemOutCapture();
        capture.start();

        // Creating an instance of Software
        Software software = new Software(new SelfCheckoutStation());
        software.customerBlockMessage();

        // Stop capturing and assert the printed message
        capture.stop();
        assertTrue(capture.getOutput().contains("Weight Discrepancy: Please solve the problem or call an attendant"));
    }

    @Test
    public void testAttendantBlockMessage() {
        // Redirect System.out to capture printed message
        SystemOutCapture capture = new SystemOutCapture();
        capture.start();

        // Creating an instance of Software
        Software software = new Software(new SelfCheckoutStation());
        software.attendantBlockMessage();

        // Stop capturing and assert the printed message
        capture.stop();
        assertTrue(capture.getOutput().contains("Customer Weight Discrepancy: Check on the customer unless the problem is solved"));
    }

    @Test
    public void testCheckWeight() {
        // Creating an instance of SelfCheckoutStation and Software
        SelfCheckoutStation scs = new SelfCheckoutStation();
        Software software = new Software(scs);

        assertFalse(software.allow); // Initial state

        // Set equal expected and current weights
        software.expectedWeight = new Mass(1000); // 1000 grams
        software.currentWeight = new Mass(1000); // 1000 grams

        software.checkWeight();

        assertTrue(software.allow); // Check that allow is true when weights are equal
    }

    @Test
    public void testCheckWeightWithDiscrepancy() {
        // Creating an instance of SelfCheckoutStation and Software
        SelfCheckoutStation scs = new SelfCheckoutStation();
        Software software = new Software(scs);

        assertFalse(software.allow); // Initial state

        // Set different expected and current weights
        software.expectedWeight = new Mass(1000); // 1000 grams
        software.currentWeight = new Mass(1500); // 1500 grams

        software.checkWeight();

        assertFalse(software.allow); // Check that allow is false when weights are different
    }

    @Test
    public void testCustomerAddsItem() {
        // Creating an instance of SelfCheckoutStation and Software
        SelfCheckoutStation scs = new SelfCheckoutStation();
        Software software = new Software(scs);

        // Set initial current weight
        software.currentWeight = new Mass(1000); // 1000 grams

        // Add an item with a mass of 500 grams
        Item item = new Item("Test Item", new Mass(500)); // 500 grams
        software.customerAddsItem(item);

        // Verify that the currentWeight is updated (1000 + 500 = 1500 grams)
        assertTrue(software.currentWeight.inGrams() == 1500);
    }

    @Test
    public void testCustomerRemovesItem() {
        // Creating an instance of SelfCheckoutStation and Software
        SelfCheckoutStation scs = new SelfCheckoutStation();
        Software software = new Software(scs);

        // Set initial current weight
        software.currentWeight = new Mass(1500); // 1500 grams

        // Remove an item with a mass of 500 grams
        Item item = new Item("Test Item", new Mass(500)); // 500 grams
        software.customerRemovesItem(item);

        // Verify that the currentWeight is updated (1500 - 500 = 1000 grams)
        assertTrue(software.currentWeight.inGrams() == 1000);
    }
}

